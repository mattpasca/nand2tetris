CHIP Inc16 {
    IN in[16];
    OUT out[16];
    PARTS:
    Not(in=in[0], out=out[0]);
    And(a=in[0], b=in[1], out=sel1);
    Not(in=in[1], out=not1);
    Mux(a=in[1], b=not1, sel=sel1, out=out[1]);
    And(a=sel1, b=in[2], out=sel2);
    Not(in=in[2], out=not2);
    Mux(a=in[2], b=not2, sel=sel2, out=out[2]);
    And(a=sel2, b=in[3], out=sel3);
    Not(in=in[3], out=not3);
    Mux(a=in[3], b=not3, sel=sel3, out=out[3]);
    And(a=sel3, b=in[4], out=sel4);
    Not(in=in[4], out=not4);
    Mux(a=in[4], b=not4, sel=sel4, out=out[4]);
    And(a=sel4, b=in[5], out=sel5);
    Not(in=in[5], out=not5);
    Mux(a=in[5], b=not5, sel=sel5, out=out[5]);
    And(a=sel5, b=in[6], out=sel6);
    Not(in=in[6], out=not6);
    Mux(a=in[6], b=not6, sel=sel6, out=out[6]);
    And(a=sel6, b=in[7], out=sel7);
    Not(in=in[7], out=not7);
    Mux(a=in[7], b=not7, sel=sel7, out=out[7]);
    And(a=sel7, b=in[8], out=sel8);
    Not(in=in[8], out=not8);
    Mux(a=in[8], b=not8, sel=sel8, out=out[8]);
    And(a=sel8, b=in[9], out=sel9);
    Not(in=in[9], out=not9);
    Mux(a=in[9], b=not9, sel=sel9, out=out[9]);
    And(a=sel9, b=in[10], out=sel10);
    Not(in=in[10], out=not10);
    Mux(a=in[10], b=not10, sel=sel10, out=out[10]);
    And(a=sel10, b=in[11], out=sel11);
    Not(in=in[11], out=not11);
    Mux(a=in[11], b=not11, sel=sel11, out=out[11]);
    And(a=sel11, b=in[12], out=sel12);
    Not(in=in[12], out=not12);
    Mux(a=in[12], b=not12, sel=sel12, out=out[12]);
    And(a=sel12, b=in[13], out=sel13);
    Not(in=in[13], out=not13);
    Mux(a=in[13], b=not13, sel=sel13, out=out[13]);
    And(a=sel13, b=in[14], out=sel14);
    Not(in=in[14], out=not14);
    Mux(a=in[14], b=not14, sel=sel14, out=out[14]);
    And(a=sel14, b=in[15], out=sel15);
    Not(in=in[15], out=not15);
    Mux(a=in[15], b=not15, sel=sel15, out=out[15]);

}