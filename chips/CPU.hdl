// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // A register
    And(a=instruction[5], b=instruction[15], out=Asel);
    Mux16(a=instruction, b=ALUout, sel=Asel, out=Ainput);
    Not(in=instruction[15], out=Notinstr15);
    Or(a=instruction[5], b=Notinstr15, out=Aload);
    Register(in=Ainput, load=Aload, out=Aout, out[0..14]=addressM);

    // Program counter
    Not(in=zr, out=jne); //Test if z!=0

    Not(in=ng, out=jge); // z=>0
    And(a=jge, b=jne, out=jgt); // z>0

    Or(a=zr, b=ng, out=jle); // z=<0

    Mux8Way(a=false, b=jgt, c=zr, d=jge, e=jle, f=jne, g=jle, h=true, sel=instruction[0..2], out=PCload);
    PC(in=ALUout, inc=true, load=PCload, reset=reset, out[0..14]=pc);

    // D register
    Register(in=ALUout, load=instruction[4], out=Dout);

    //ALU
    Mux16(a=Aout, b=inM, sel=instruction[12], out=ALUyinput);
    ALU(x=Dout, y=ALUyinput, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=ALUout, out=outM, zr=zr, ng=ng);

    Trivial(in=instruction[3], out=writeM);

}
